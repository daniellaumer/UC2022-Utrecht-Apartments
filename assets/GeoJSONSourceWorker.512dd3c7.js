var Q=Object.defineProperty,P=Object.defineProperties;var G=Object.getOwnPropertyDescriptors;var S=Object.getOwnPropertySymbols;var M=Object.prototype.hasOwnProperty,Z=Object.prototype.propertyIsEnumerable;var R=(p,e,t)=>e in p?Q(p,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):p[e]=t,F=(p,e)=>{for(var t in e||(e={}))M.call(e,t)&&R(p,t,e[t]);if(S)for(var t of S(e))Z.call(e,t)&&R(p,t,e[t]);return p},O=(p,e)=>P(p,G(e));import{hP as _,Y as I,p8 as v,oI as A,fm as z,ji as N,G as B,ai as Y,hB as L,r as b,hC as U,bM as W,bz as J,bY as k,p9 as V,pa as H,pb as K}from"./vendor.4451b4ce.js";import{u as X}from"./FeatureStore.552b38fb.js";import{f as w,g as T}from"./QueryEngineResult.bb7bb36b.js";import{Y as ee}from"./QueryEngine.949dfb50.js";import{T as te,L as ie,O as se}from"./geojson.9da933e9.js";import{u as ne,l as re,a as ae}from"./clientSideDefaults.c528833a.js";import{w as oe,m as j,f as q,a as E,g as C}from"./sourceUtils.ba0b74b7.js";import"./PooledRBush.ef42aec5.js";import"./quickselect.03306040.js";import"./optimizedFeatureQueryEngineAdapter.bde096c0.js";import"./centroid.5ae6ed88.js";import"./WhereClause.d6b5dcf7.js";import"./utils.15bf8d44.js";import"./ClassBreaksDefinition.da52e26b.js";import"./json.d1a0fa35.js";import"./QueryEngineCapabilities.c2e9875c.js";const ue={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class qe{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._fieldsIndex=this._createDefaultAttributes=null}async load(e,t={}){this.loadOptions={url:e.url,customParameters:e.customParameters};const s=[];await this._checkProjection(e.spatialReference);let n=null;e.url&&(n=await this._fetch(t==null?void 0:t.signal));const a=te(n,{geometryType:e.geometryType}),o=e.fields||a.fields||[],l=e.hasZ!=null?e.hasZ:a.hasZ,d=a.geometryType,h=e.objectIdField||a.objectIdFieldName||"__OBJECTID",y=e.spatialReference||_;let i=e.timeInfo;o===a.fields&&a.unknownFields.length>0&&s.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:a.unknownFields}});let u=o.find(r=>r.name===h);u?(u.type!=="esriFieldTypeString"&&(u.type="esriFieldTypeOID"),u.editable=!1,u.nullable=!1):(u={alias:h,name:h,type:a.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},o.unshift(u));const c={};for(const r of o){if(r.name==null&&(r.name=r.alias),r.alias==null&&(r.alias=r.name),!r.name)throw new I("geojson-layer:invalid-field-name","field name is missing",{field:r});if(!v.jsonValues.includes(r.type))throw new I("geojson-layer:invalid-field-type",`invalid type for field "${r.name}"`,{field:r});if(r.name!==u.name){const g=A(r);g!==void 0&&(c[r.name]=g)}}this._fieldsIndex=new z(o);const m=this._fieldsIndex.requiredFields.indexOf(u);if(m>-1&&this._fieldsIndex.requiredFields.splice(m,1),i){if(i.startTimeField){const r=this._fieldsIndex.get(i.startTimeField);r?(i.startTimeField=r.name,r.type="esriFieldTypeDate"):i.startTimeField=null}if(i.endTimeField){const r=this._fieldsIndex.get(i.endTimeField);r?(i.endTimeField=r.name,r.type="esriFieldTypeDate"):i.endTimeField=null}if(i.trackIdField){const r=this._fieldsIndex.get(i.trackIdField);r?i.trackIdField=r.name:(i.trackIdField=null,s.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:i}}))}i.startTimeField||i.endTimeField||(s.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:i}}),i=null)}const $=d?ne(d):null,f={warnings:s,featureErrors:[],layerDefinition:O(F({},ue),{drawingInfo:$,templates:re(c),extent:null,geometryType:d,objectIdField:h,fields:o,hasZ:!!l,timeInfo:i})};this._queryEngine=new ee({fields:o,geometryType:d,hasM:!1,hasZ:l,objectIdField:h,spatialReference:y,timeInfo:i,featureStore:new X({geometryType:d,hasM:!1,hasZ:l}),cacheSpatialQueries:!0}),this._createDefaultAttributes=ae(c,h);const x=await this._createFeatures(n);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const D=this._normalizeFeatures(x,f.warnings,f.featureErrors);if(this._queryEngine.featureStore.addMany(D),f.layerDefinition.extent=this._queryEngine.fullExtent,f.layerDefinition.timeInfo){const{start:r,end:g}=this._queryEngine.timeExtent;f.layerDefinition.timeInfo.timeExtent=[r,g]}return f}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await Promise.all([oe(t,s),w(e.adds,t),w(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var t;return this.loadOptions.customParameters=e,(t=this._snapshotTask)==null||t.abort(),this._snapshotTask=N(this._snapshotFeatures),this._snapshotTask.promise.then(s=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,s);const n=this._normalizeFeatures(s);n&&this._queryEngine.featureStore.addMany(n)},s=>{this._queryEngine.featureStore.clear(),B(s)||Y.getLogger("esri.layers.GeoJSONLayer").error(new I("geojson-layer:refresh","An error occurred during refresh",{error:s}))}),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent,timeExtent:this._queryEngine.timeExtent}}async _createFeatures(e){const{geometryType:t,hasZ:s,objectIdField:n}=this._queryEngine,a=ie(e,{geometryType:t,hasZ:s,objectIdField:n});if(!L(this._queryEngine.spatialReference,_))for(const o of a)b(o.geometry)&&(o.geometry=U(T(W(o.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),_,this._queryEngine.spatialReference)));return a}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:s}=this.loadOptions,n=(await J(t,{responseType:"json",query:F({},s),signal:e})).data;return await se(n),n}_normalizeFeatures(e,t,s){const{objectIdField:n}=this._queryEngine,a=[];for(const o of e){const l=this._createDefaultAttributes(),d=j(this._fieldsIndex,l,o.attributes,!0,t);d?s==null||s.push(d):(this._assignObjectId(l,o.attributes,!0),o.attributes=l,o.objectId=l[n],a.push(o))}return a}_applyEdits(e){const{adds:t,updates:s,deletes:n}=e,a={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t&&t.length&&this._applyAddEdits(a,t),s&&s.length&&this._applyUpdateEdits(a,s),n&&n.length){for(const o of n)a.deleteResults.push(q(o));this._queryEngine.featureStore.removeManyById(n)}return{extent:this._queryEngine.fullExtent,timeExtent:this._queryEngine.timeExtent,featureEditResults:a}}_applyAddEdits(e,t){const{addResults:s}=e,{geometryType:n,hasM:a,hasZ:o,objectIdField:l,spatialReference:d,featureStore:h}=this._queryEngine,y=[];for(const i of t){if(i.geometry&&n!==k(i.geometry)){s.push(E("Incorrect geometry type."));continue}const u=this._createDefaultAttributes(),c=j(this._fieldsIndex,u,i.attributes);if(c)s.push(c);else{if(this._assignObjectId(u,i.attributes),i.attributes=u,i.uid!=null){const m=i.attributes[l];e.uidToObjectId[i.uid]=m}b(i.geometry)&&(i.geometry=T(C(i.geometry,d),i.geometry.spatialReference,d)),y.push(i),s.push(q(i.attributes[l]))}}h.addMany(V([],y,n,o,a,l))}_applyUpdateEdits({updateResults:e},t){const{geometryType:s,hasM:n,hasZ:a,objectIdField:o,spatialReference:l,featureStore:d}=this._queryEngine;for(const h of t){const{attributes:y,geometry:i}=h,u=y&&y[o];if(u==null){e.push(E(`Identifier field ${o} missing`));continue}if(!d.has(u)){e.push(E(`Feature with object id ${u} missing`));continue}const c=H(d.getFeature(u),s,a,n);if(b(i)){if(s!==k(i)){e.push(E("Incorrect geometry type."));continue}c.geometry=T(C(i,l),i.spatialReference,l)}if(y){const m=j(this._fieldsIndex,c.attributes,y);if(m){e.push(m);continue}}d.add(K(c,s,a,n,o)),e.push(q(u))}}_createObjectIdGenerator(e,t){const s=e.fieldsIndex.get(e.objectIdField);if(s.type==="esriFieldTypeString")return()=>s.name+"-"+Date.now().toString(16);let n=Number.NEGATIVE_INFINITY;for(const a of t)a.objectId&&(n=Math.max(n,a.objectId));return n=Math.max(0,n)+1,()=>n++}_assignObjectId(e,t,s=!1){const n=this._queryEngine.objectIdField;e[n]=s&&n in t?t[n]:this._objectIdGenerator()}async _checkProjection(e){try{await w(_,e)}catch{throw new I("geojson-layer","Projection not supported")}}}export{qe as default};
