import{y as n,r as c,e as r,d as i,n as l}from"./vendor.4451b4ce.js";import{o as s}from"./queryEngineUtils.4739a040.js";import"./DimensioningAnalysisView3D.4a6a180a.js";import"./LineVisualElement.52d411f6.js";import"./analysisViewUtils.c9e4b8a9.js";import"./PointVisualElement.1ff3b834.js";import"./RightAngleQuadVisualElement.dc086cd2.js";import"./Segment.2013d042.js";import"./elevationInfoUtils.1c169a54.js";import"./dragEventPipeline3D.b7881714.js";import"./EditGeometryOperations.e04e3e62.js";import"./QueryEngineResult.bb7bb36b.js";import"./WhereClause.d6b5dcf7.js";import"./utils.15bf8d44.js";import"./ClassBreaksDefinition.da52e26b.js";import"./json.d1a0fa35.js";let e=class extends n{constructor(t){super(t)}get availability(){return 1}refresh(){}async fetchCandidates(t,p){const o=this.layerSource.layer.source;return o.querySnapping?(await o.querySnapping({distance:t.distance,point:t.coordinateHelper.vectorToPoint(t.point).toJSON(),types:t.types,query:c(t.filter)?t.filter.createQuery().toJSON():{where:"1=1"}},{signal:p})).candidates.map(a=>s(a,t.coordinateHelper,t.elevationInfo)):[]}};r([i({constructOnly:!0})],e.prototype,"layerSource",void 0),r([i({readOnly:!0})],e.prototype,"availability",null),e=r([l("esri.views.interactive.snapping.featureSources.FeatureCollectionSnappingSource")],e);export{e as FeatureCollectionSnappingSource};
